generator client {
  provider = "prisma-client-js"
  output   = "./generated/authentication"
}

datasource dbAuthentication {
  provider = "sqlserver"
  url      = env("DATABASE_AUTHENTICATION_URL")
}

model Notification_CC {
  Id      BigInt  @id(map: "PK_Notification_CC") @default(autoincrement())
  EmailTo String? @dbAuthentication.VarChar(500)
  EmailCC String? @dbAuthentication.VarChar(500)
}

model Pending_Approvals {
  Id              BigInt    @id(map: "PK_Pending_Approvals") @default(autoincrement())
  Document_Type   String?   @dbAuthentication.VarChar(50)
  Document_Number String?   @dbAuthentication.VarChar(50)
  Approver        String?   @dbAuthentication.VarChar(50)
  Approve_Level   Int       @default(1, map: "DF_Pending_Approvals_Approve_Level")
  Status          Boolean?
  Revision        Int       @default(1, map: "DF_Pending_Approvals_Revision")
  Created_At      DateTime? @dbAuthentication.DateTime
  Created_By      String?   @dbAuthentication.VarChar(50)
  Updated_At      DateTime? @dbAuthentication.DateTime
  Updated_By      String?   @dbAuthentication.VarChar(50)
  Approver_Title  String?   @dbAuthentication.VarChar(50)

  @@index([Document_Number, Document_Type, Approver, Revision], map: "IX_Pending_Approvals")
}

model Pending_Document {
  Id               BigInt    @id(map: "PK_Pending_Document") @default(autoincrement())
  Document_Type    String?   @dbAuthentication.VarChar(50)
  Document_No      String?   @dbAuthentication.VarChar(150)
  Transaction_Date DateTime? @dbAuthentication.DateTime
  Recipient_To     String?   @dbAuthentication.VarChar(350)
  Recipient_CC     String?   @dbAuthentication.VarChar(350)
  Recipient_Bcc    String?   @dbAuthentication.VarChar(350)
  Subject          String?   @dbAuthentication.VarChar(350)
  Telegram_Body    String?   @dbAuthentication.VarChar(4096)
  Body             String?   @dbAuthentication.VarChar(2500)
  Is_Read          Boolean   @default(false, map: "DF_Table_1_Is_Read")
  Read_Date        DateTime? @dbAuthentication.DateTime
  Read_Result      String?   @dbAuthentication.VarChar(250)
  Is_Sent          Boolean   @default(false, map: "DF_Pending_Document_Is_Sent")
  Sent_Date        DateTime? @dbAuthentication.DateTime
  Sent_Result      String?   @dbAuthentication.VarChar(250)
  Status           Boolean?
  Status_By        String?   @dbAuthentication.VarChar(100)
  Status_Date      DateTime? @dbAuthentication.DateTime
  Remarks          String?   @dbAuthentication.VarChar(350)
  Created_By       String?   @dbAuthentication.VarChar(100)
  Created_At       DateTime? @dbAuthentication.DateTime
  ComLocID         String?   @dbAuthentication.VarChar(50)
}

model Release_Matrix {
  Id               BigInt  @id(map: "PK_Release_Matrix") @default(autoincrement())
  CompanyId        String? @dbAuthentication.VarChar(50)
  ComLocId         String? @dbAuthentication.VarChar(50)
  Document_Type    String? @dbAuthentication.VarChar(50)
  Approver         String? @dbAuthentication.VarChar(150)
  Approval_Level   Int     @default(1, map: "DF_Table_1_Level")
  OrganizationCode String? @dbAuthentication.VarChar(50)
  Approver_Title   String? @dbAuthentication.VarChar(50)
}

model Release_Matrix_CC {
  Id               BigInt  @id(map: "PK_Release_Matrix_CC") @default(autoincrement())
  OrganizationCode String? @dbAuthentication.VarChar(150)
  DocumentType     String? @dbAuthentication.VarChar(15)
  Email            String? @dbAuthentication.VarChar(150)
  Name             String? @dbAuthentication.VarChar(150)
}

model Reports {
  Modul            String? @dbAuthentication.VarChar(20)
  Code             String? @dbAuthentication.VarChar(20)
  Name             String? @dbAuthentication.VarChar(200)
  Query            String? @dbAuthentication.VarChar(Max)
  Fields           String? @dbAuthentication.VarChar(Max)
  Headers          String? @dbAuthentication.VarChar(Max)
  ShowAsHeaders    String? @dbAuthentication.VarChar(Max)
  ShowAsSubHeaders String? @dbAuthentication.VarChar(Max)
  Filters          String? @dbAuthentication.VarChar(200)
  Formats          String? @dbAuthentication.VarChar(Max)
  Totals           String? @dbAuthentication.VarChar(200)
  PrimarySort      String? @dbAuthentication.VarChar(150)
  SecondarySort    String? @dbAuthentication.VarChar(150)
  ThirdSort        String? @dbAuthentication.VarChar(150)
  Uniq             BigInt  @id(map: "PK_Reports") @default(autoincrement())
}

model Role {
  Id          BigInt        @id(map: "PK_Role") @default(autoincrement())
  Role_Code   String?       @dbAuthentication.VarChar(50)
  Role_Name   String?       @dbAuthentication.VarChar(150)
  Created_At  DateTime?     @dbAuthentication.DateTime
  Created_By  String?       @dbAuthentication.VarChar(100)
  Updated_At  DateTime?     @dbAuthentication.DateTime
  Updated_By  String?       @dbAuthentication.VarChar(100)
  Deleted     Boolean       @default(false, map: "DF_Role_Deleted")
  Deleted_At  DateTime?     @dbAuthentication.DateTime
  Deleted_By  String?       @dbAuthentication.VarChar(100)
  Role_Detail Role_Detail[]
  User_Role   User_Role[]
}

model Role_Detail {
  Id             BigInt  @id(map: "PK_Role_Detail") @default(autoincrement())
  Role_Id        BigInt
  ControllerName String? @dbAuthentication.VarChar(150)
  ActionName     String? @dbAuthentication.VarChar(150)
  Roles          String? @dbAuthentication.VarChar(1000)
  Url            String? @dbAuthentication.VarChar(150)
  Role           Role    @relation(fields: [Role_Id], references: [Id], onUpdate: NoAction, map: "FK_Role_Detail_Role")
}

model User_Activity {
  Id                  BigInt         @id(map: "PK_User_Activity") @default(autoincrement())
  Username            String?        @dbAuthentication.VarChar(100)
  ControllerName      String?        @dbAuthentication.VarChar(150)
  ActionName          String?        @dbAuthentication.VarChar(150)
  Activity            String?        @dbAuthentication.VarChar(150)
  IP_Address          String?        @dbAuthentication.VarChar(30)
  Created_Date        DateTime       @dbAuthentication.DateTime
  User_Activity       User_Activity  @relation("User_ActivityToUser_Activity", fields: [Id], references: [Id], onUpdate: NoAction, map: "FK_User_Activity_User_Activity")
  other_User_Activity User_Activity? @relation("User_ActivityToUser_Activity")
}

model User_ComLoc {
  Id         BigInt    @id(map: "PK_User_ComLoc") @default(autoincrement())
  Username   String    @dbAuthentication.VarChar(100)
  ComLocID   String    @dbAuthentication.VarChar(100)
  Created_At DateTime? @dbAuthentication.DateTime
  Created_By String?   @dbAuthentication.VarChar(100)
  Updated_At DateTime? @dbAuthentication.DateTime
  Updated_By String?   @dbAuthentication.VarChar(100)
}

model User_Login {
  Id                   BigInt    @id(map: "PK_User_Login") @default(autoincrement())
  Username             String    @unique(map: "IX_User_Login") @dbAuthentication.VarChar(100)
  Password             String    @dbAuthentication.VarChar(150)
  Email                String?   @dbAuthentication.VarChar(150)
  Name                 String?   @dbAuthentication.VarChar(150)
  ComLocID             String?   @dbAuthentication.VarChar(50)
  User_Level           String?   @dbAuthentication.VarChar(50)
  Is_Admin             Boolean   @default(false, map: "DF_User_Login_Is_Admin")
  Created_At           DateTime? @dbAuthentication.DateTime
  Created_By           String?   @dbAuthentication.VarChar(100)
  Updated_At           DateTime? @dbAuthentication.DateTime
  Updated_By           String?   @dbAuthentication.VarChar(100)
  Deleted              Boolean   @default(false, map: "DF_User_Login_Deleted")
  Deleted_At           DateTime? @dbAuthentication.DateTime
  Deleted_By           String?   @dbAuthentication.VarChar(100)
  Telegram_Id          BigInt?
  Room_Id              BigInt?
  SuperUser_CrewingApp Boolean   @default(false, map: "DF_User_Login_SuperAdmin_CrewingApp")
}

model User_Role {
  Id              BigInt    @id(map: "PK_User_Role") @default(autoincrement())
  Username        String?   @dbAuthentication.VarChar(100)
  Role_Id         BigInt
  Role_Crewing_Id BigInt?
  Created_At      DateTime? @dbAuthentication.DateTime
  Created_By      String?   @dbAuthentication.VarChar(100)
  Updated_At      DateTime? @dbAuthentication.DateTime
  Updated_By      String?   @dbAuthentication.VarChar(100)
  Deleted         Boolean   @default(false, map: "DF_User_Role_Deleted")
  Deleted_At      DateTime? @dbAuthentication.DateTime
  Deleted_By      String?   @dbAuthentication.VarChar(100)
  Role            Role      @relation(fields: [Role_Id], references: [Id], onUpdate: NoAction, map: "FK_User_Role_Role")
}
